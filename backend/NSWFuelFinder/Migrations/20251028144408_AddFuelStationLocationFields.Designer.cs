// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NSWFuelFinder.Data;

#nullable disable

namespace NSWFuelFinder.Migrations
{
    [DbContext(typeof(FuelFinderDbContext))]
    [Migration("20251028144408_AddFuelStationLocationFields")]
    partial class AddFuelStationLocationFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("NSWFuelFinder.Data.FuelPriceEntity", b =>
                {
                    b.Property<string>("StationCode")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("FuelType")
                        .HasMaxLength(16)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("LastUpdatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasPrecision(8, 1)
                        .HasColumnType("TEXT");

                    b.Property<string>("Unit")
                        .HasMaxLength(16)
                        .HasColumnType("TEXT");

                    b.HasKey("StationCode", "FuelType");

                    b.HasIndex("FuelType");

                    b.HasIndex("LastUpdatedUtc");

                    b.ToTable("FuelPrices", (string)null);
                });

            modelBuilder.Entity("NSWFuelFinder.Data.FuelStationEntity", b =>
                {
                    b.Property<string>("StationCode")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasMaxLength(512)
                        .HasColumnType("TEXT");

                    b.Property<string>("Brand")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("BrandId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAdBlueAvailable")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Latitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Postcode")
                        .HasMaxLength(16)
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .HasMaxLength(16)
                        .HasColumnType("TEXT");

                    b.Property<string>("StationId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("Suburb")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("SyncedAtUtc")
                        .HasColumnType("TEXT");

                    b.HasKey("StationCode");

                    b.ToTable("FuelStations", (string)null);
                });

            modelBuilder.Entity("NSWFuelFinder.Data.FuelPriceEntity", b =>
                {
                    b.HasOne("NSWFuelFinder.Data.FuelStationEntity", "Station")
                        .WithMany("Prices")
                        .HasForeignKey("StationCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Station");
                });

            modelBuilder.Entity("NSWFuelFinder.Data.FuelStationEntity", b =>
                {
                    b.Navigation("Prices");
                });
#pragma warning restore 612, 618
        }
    }
}
